# Problem 1. Create a vector object containing the names of the days of the week.
days_week <- c("Monday", "Tuesday", "Wednesday","Thursday", "Friday")
days_week
# create a vector of character strings
animal <- c("frog", "spider", "worm", "bee")
animal
days_year
days_year <- 1:365
days_year
days_week [3]
r <- 0:100
area <- pi*(r^2)
area [3]
area [4]
area [3]
dogs <- c(2, 0, 1, 0, 1)
cats <- c(1, 0, 0, 2, 3)
total_pets <- dogs + cats
total_pets
dogs <- c(2, 0, 1, 0, 1)
cats <- c(1, 0, 0, 2, 3)
total_pets_per_household <- dogs + cats
total_pets_per_household
library(openxlsx)
data_frame <- read.xlsx(xlsxFile = "project_data_set.xlsx", sheet = 'sheet1')
library(openxlsx)
data_frame <- read.xlsx(xlsxFile = "project_data_set.xlsx", sheet = 'sheet1')
library(openxlsx)
data_frame <- read.xlsx(xlsxFile = "project_data_set.xlsx", sheet = 'Sheet1')
library(openxlsx)
data_frame <- read.xlsx(xlsxFile = "project_data_set.xlsx")
data_frame <- read.xlsx(file.choose())
my_data <- read.delim("GSE203554_borchelt.final")
my_data <- read.delim("GSE203554_borchelt.final.txt")
my_data <- read.delim(file.choose())
data <- read.table("GSE203554_borchelt.final.txt", header = TRUE, sep = "\t")
data <- read.table("/Users/schiebpe/Library/CloudStorage/OneDrive-Vanderbilt/# Data Analysis/GSE203554_borchelt.final.txt", header = TRUE, sep = "\t")
data(/Users/schiebpe/Library/CloudStorage/OneDrive-Vanderbilt/# Data Analysis/GSE203554_borchelt.final.txt)
#####################
##### Load data #####
#####################
#getwd()
#where r project was created
#setwd()
#set a new path for data have to redo everytime
data(mtcars)
#####################
##### Load data #####
#####################
#getwd()
#where r project was created
#setwd()
#set a new path for data have to redo everytime
data(mtcars)
my_data <- read.delim(file.choose())
data <- read.table("/Users/schiebpe/Library/CloudStorage/OneDrive-Vanderbilt/# Data Analysis/GSE203554_borchelt.final.txt", header = TRUE, sep = "\t")
getwd("GSE203554_borchelt.final.txt")
getwd()
#####################
##### Load data #####
#####################
getwd()
setwd("/Users/schiebpe/Library/CloudStorage/OneDrive-Vanderbilt/# Data Analysis/GSE203554_borchelt.final.txt")
data("GSE203554_borchelt.final.txt")
file.show("/Users/schiebpe/Library/CloudStorage/OneDrive-Vanderbilt/# Data Analysis/GSE203554_borchelt.final.txt")
source("scripts/0_vectors.R")
view(data)
View(data)
# Convert logistic regression output to odds ratio
exp(coef(model))
#install.packages("pacman")
library(pacman)
pacman::p_load(tidyverse,
devtools,
janitor,
dplyr,
stats,
patchwork,
stringr,
stats,
patchwork,
ggplot2,
tidymodels,
ggcorrplot,
knitr,
pROC,
kableExtra
)
#install.packages("ggcorrplot")
library(ggcorrplot)
# Read data file
diabetes <- read.csv("diabetes.csv")
# McFadden's R^2
1 - model$deviance / model$null.deviance
setwd("~/OneDrive - Vanderbilt/# Data Analysis/project_data_analysis")
#install.packages("pacman")
library(pacman)
pacman::p_load(tidyverse,
devtools,
janitor,
dplyr,
stats,
patchwork,
stringr,
stats,
patchwork,
ggplot2,
tidymodels,
ggcorrplot,
knitr,
pROC,
kableExtra
)
#install.packages("ggcorrplot")
library(ggcorrplot)
# Read data file
diabetes <- read.csv("diabetes.csv")
# Make a copy of the diabetes data set so the columns can be renamed for correlation matrix
diabetes_copy = diabetes
# Set column names
colnames(diabetes_copy) <- c("Pregnancies", "Glucose", "Blood Pressure", "Skin Thickness", "Insulin", "Body Mass Index",
"Diabetes Pedigree Function", "Age", "Outcome")
# Calculate the correlation matrix
correlation_matrix <- round(cor(diabetes_copy), 1)
# Set consistent row and column names
rownames(correlation_matrix) <- colnames(correlation_matrix)
# Create the correlation plot using ggcorrplot
ggcorrplot(
correlation_matrix,
hc.order = TRUE, # Sort correlation matrix hierarchically
type = "full",
lab = TRUE, # Add correlation coefficient labels to plot
lab_size = 3, # Size of correlation coefficient
colors = viridis::viridis(3) # Viridis is a color blind friendly color palette
) +
ggtitle("Correlation Matrix of Health Metrics and Diabetes") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), # Center the plot title
axis.title.x = element_blank(),  # Remove x-axis title
axis.title.y = element_blank()   # Remove y-axis title
) +
guides(
fill = guide_colorbar(title = NULL)  # Remove the color legend title
)
# Set seed for reproducible results each time running code
set.seed(123)
# Binary logistic regression
model_glucose <- glm(Outcome ~ Glucose, data = diabetes, family = binomial)
summary(model)
# Create a new data frame for predictions
diabetes$predicted_prob_glucose <- predict(model, type = "response")
# Set seed for reproducible results each time running code
set.seed(123)
# Binary logistic regression
model_glucose <- glm(Outcome ~ Glucose, data = diabetes, family = binomial)
summary(model)
# Create a new data frame for predictions
diabetes$predicted_prob_glucose <- predict(model, type = "response")
ggplot(diabetes, aes(x = Glucose, y = Outcome)) +
geom_point(alpha = 0.5) +  # Scatter plot of actual data
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "red", fill = "pink", linewidth = 1.2) +
labs(
title = "Glucose Levels and Outcome",
x = "Glucose Level (mg/dL)",
y = "P(diabetes)") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1), # Black border
)
# Model summary and fit statistics
summary(model)
# Convert logistic regression output to odds ratio
exp(coef(model))
# McFadden's R^2
1 - model$deviance / model$null.deviance
# Create a new data frame for predictions
diabetes$predicted_prob_glucose <- predict(model, type = "response")
ggplot(diabetes, aes(x = Glucose, y = Outcome)) +
geom_point(alpha = 0.5) +  # Scatter plot of actual data
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "red", fill = "pink", linewidth = 1.2) +
labs(
title = "Glucose Levels and Outcome",
x = "Glucose Level (mg/dL)",
y = "P(diabetes)") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1), # Black border
)
# Model summary and fit statistics
summary(model_glucose)
# Convert logistic regression output to odds ratio
exp(coef(model_glucose))
# McFadden's R^2
1 - model_glucose$deviance / model_glucose$null.deviance
set.seed(123)
model_all <- glm(Outcome ~ Glucose + DiabetesPedigreeFunction + Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + Age , data = diabetes, family = binomial)
summary(model)
# Create a new data frame for predictions
diabetes$predicted_prob_AllVariables <- predict(model, type = "response")
# Model summary and fit statistics
summary(model_all)
set.seed(123)
model_all <- glm(Outcome ~ Glucose + DiabetesPedigreeFunction + Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + Age , data = diabetes, family = binomial)
summary(model)
set.seed(123)
model_all <- glm(Outcome ~ Glucose + DiabetesPedigreeFunction + Pregnancies + Glucose + BloodPressure + SkinThickness + Insulin + BMI + Age , data = diabetes, family = binomial)
summary(model_all)
# Create a new data frame for predictions
diabetes$predicted_prob_AllVariables <- predict(model_all, type = "response")
# Model summary and fit statistics
summary(model_all)
# Convert logistic regression output to odds ratio
exp(coef(model_all))
